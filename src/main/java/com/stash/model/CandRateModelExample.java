package com.stash.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class CandRateModelExample {
    /**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table public.cand_rate
	 * @mbg.generated  Wed Nov 01 16:41:19 CST 2017
	 */
	protected String orderByClause;
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table public.cand_rate
	 * @mbg.generated  Wed Nov 01 16:41:19 CST 2017
	 */
	protected boolean distinct;
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table public.cand_rate
	 * @mbg.generated  Wed Nov 01 16:41:19 CST 2017
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table public.cand_rate
	 * @mbg.generated  Wed Nov 01 16:41:19 CST 2017
	 */
	public CandRateModelExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table public.cand_rate
	 * @mbg.generated  Wed Nov 01 16:41:19 CST 2017
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table public.cand_rate
	 * @mbg.generated  Wed Nov 01 16:41:19 CST 2017
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table public.cand_rate
	 * @mbg.generated  Wed Nov 01 16:41:19 CST 2017
	 */
	public void setDistinct(boolean distinct) {
		this.distinct = distinct;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table public.cand_rate
	 * @mbg.generated  Wed Nov 01 16:41:19 CST 2017
	 */
	public boolean isDistinct() {
		return distinct;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table public.cand_rate
	 * @mbg.generated  Wed Nov 01 16:41:19 CST 2017
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table public.cand_rate
	 * @mbg.generated  Wed Nov 01 16:41:19 CST 2017
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table public.cand_rate
	 * @mbg.generated  Wed Nov 01 16:41:19 CST 2017
	 */
	public Criteria or() {
		Criteria criteria = createCriteriaInternal();
		oredCriteria.add(criteria);
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table public.cand_rate
	 * @mbg.generated  Wed Nov 01 16:41:19 CST 2017
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table public.cand_rate
	 * @mbg.generated  Wed Nov 01 16:41:19 CST 2017
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table public.cand_rate
	 * @mbg.generated  Wed Nov 01 16:41:19 CST 2017
	 */
	public void clear() {
		oredCriteria.clear();
		orderByClause = null;
		distinct = false;
	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the database table public.cand_rate
	 * @mbg.generated  Wed Nov 01 16:41:19 CST 2017
	 */
	protected abstract static class GeneratedCriteria {
		protected List<Criterion> criteria;

		protected GeneratedCriteria() {
			super();
			criteria = new ArrayList<Criterion>();
		}

		public boolean isValid() {
			return criteria.size() > 0;
		}

		public List<Criterion> getAllCriteria() {
			return criteria;
		}

		public List<Criterion> getCriteria() {
			return criteria;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteria.add(new Criterion(condition));
		}

		protected void addCriterion(String condition, Object value, String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property + " cannot be null");
			}
			criteria.add(new Criterion(condition, value));
		}

		protected void addCriterion(String condition, Object value1, Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property + " cannot be null");
			}
			criteria.add(new Criterion(condition, value1, value2));
		}

		protected void addCriterionForJDBCDate(String condition, Date value, String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property + " cannot be null");
			}
			addCriterion(condition, new java.sql.Date(value.getTime()), property);
		}

		protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property + " cannot be null or empty");
			}
			List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
			Iterator<Date> iter = values.iterator();
			while (iter.hasNext()) {
				dateList.add(new java.sql.Date(iter.next().getTime()));
			}
			addCriterion(condition, dateList, property);
		}

		protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property + " cannot be null");
			}
			addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
		}

		public Criteria andIdIsNull() {
			addCriterion("id is null");
			return (Criteria) this;
		}

		public Criteria andIdIsNotNull() {
			addCriterion("id is not null");
			return (Criteria) this;
		}

		public Criteria andIdEqualTo(Integer value) {
			addCriterion("id =", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdNotEqualTo(Integer value) {
			addCriterion("id <>", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdGreaterThan(Integer value) {
			addCriterion("id >", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("id >=", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdLessThan(Integer value) {
			addCriterion("id <", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdLessThanOrEqualTo(Integer value) {
			addCriterion("id <=", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdIn(List<Integer> values) {
			addCriterion("id in", values, "id");
			return (Criteria) this;
		}

		public Criteria andIdNotIn(List<Integer> values) {
			addCriterion("id not in", values, "id");
			return (Criteria) this;
		}

		public Criteria andIdBetween(Integer value1, Integer value2) {
			addCriterion("id between", value1, value2, "id");
			return (Criteria) this;
		}

		public Criteria andIdNotBetween(Integer value1, Integer value2) {
			addCriterion("id not between", value1, value2, "id");
			return (Criteria) this;
		}

		public Criteria andCodeIsNull() {
			addCriterion("code is null");
			return (Criteria) this;
		}

		public Criteria andCodeIsNotNull() {
			addCriterion("code is not null");
			return (Criteria) this;
		}

		public Criteria andCodeEqualTo(String value) {
			addCriterion("code =", value, "code");
			return (Criteria) this;
		}

		public Criteria andCodeNotEqualTo(String value) {
			addCriterion("code <>", value, "code");
			return (Criteria) this;
		}

		public Criteria andCodeGreaterThan(String value) {
			addCriterion("code >", value, "code");
			return (Criteria) this;
		}

		public Criteria andCodeGreaterThanOrEqualTo(String value) {
			addCriterion("code >=", value, "code");
			return (Criteria) this;
		}

		public Criteria andCodeLessThan(String value) {
			addCriterion("code <", value, "code");
			return (Criteria) this;
		}

		public Criteria andCodeLessThanOrEqualTo(String value) {
			addCriterion("code <=", value, "code");
			return (Criteria) this;
		}

		public Criteria andCodeLike(String value) {
			addCriterion("code like", value, "code");
			return (Criteria) this;
		}

		public Criteria andCodeNotLike(String value) {
			addCriterion("code not like", value, "code");
			return (Criteria) this;
		}

		public Criteria andCodeIn(List<String> values) {
			addCriterion("code in", values, "code");
			return (Criteria) this;
		}

		public Criteria andCodeNotIn(List<String> values) {
			addCriterion("code not in", values, "code");
			return (Criteria) this;
		}

		public Criteria andCodeBetween(String value1, String value2) {
			addCriterion("code between", value1, value2, "code");
			return (Criteria) this;
		}

		public Criteria andCodeNotBetween(String value1, String value2) {
			addCriterion("code not between", value1, value2, "code");
			return (Criteria) this;
		}

		public Criteria andNameIsNull() {
			addCriterion("name is null");
			return (Criteria) this;
		}

		public Criteria andNameIsNotNull() {
			addCriterion("name is not null");
			return (Criteria) this;
		}

		public Criteria andNameEqualTo(String value) {
			addCriterion("name =", value, "name");
			return (Criteria) this;
		}

		public Criteria andNameNotEqualTo(String value) {
			addCriterion("name <>", value, "name");
			return (Criteria) this;
		}

		public Criteria andNameGreaterThan(String value) {
			addCriterion("name >", value, "name");
			return (Criteria) this;
		}

		public Criteria andNameGreaterThanOrEqualTo(String value) {
			addCriterion("name >=", value, "name");
			return (Criteria) this;
		}

		public Criteria andNameLessThan(String value) {
			addCriterion("name <", value, "name");
			return (Criteria) this;
		}

		public Criteria andNameLessThanOrEqualTo(String value) {
			addCriterion("name <=", value, "name");
			return (Criteria) this;
		}

		public Criteria andNameLike(String value) {
			addCriterion("name like", value, "name");
			return (Criteria) this;
		}

		public Criteria andNameNotLike(String value) {
			addCriterion("name not like", value, "name");
			return (Criteria) this;
		}

		public Criteria andNameIn(List<String> values) {
			addCriterion("name in", values, "name");
			return (Criteria) this;
		}

		public Criteria andNameNotIn(List<String> values) {
			addCriterion("name not in", values, "name");
			return (Criteria) this;
		}

		public Criteria andNameBetween(String value1, String value2) {
			addCriterion("name between", value1, value2, "name");
			return (Criteria) this;
		}

		public Criteria andNameNotBetween(String value1, String value2) {
			addCriterion("name not between", value1, value2, "name");
			return (Criteria) this;
		}

		public Criteria andCurrentIsNull() {
			addCriterion("current is null");
			return (Criteria) this;
		}

		public Criteria andCurrentIsNotNull() {
			addCriterion("current is not null");
			return (Criteria) this;
		}

		public Criteria andCurrentEqualTo(Double value) {
			addCriterion("current =", value, "current");
			return (Criteria) this;
		}

		public Criteria andCurrentNotEqualTo(Double value) {
			addCriterion("current <>", value, "current");
			return (Criteria) this;
		}

		public Criteria andCurrentGreaterThan(Double value) {
			addCriterion("current >", value, "current");
			return (Criteria) this;
		}

		public Criteria andCurrentGreaterThanOrEqualTo(Double value) {
			addCriterion("current >=", value, "current");
			return (Criteria) this;
		}

		public Criteria andCurrentLessThan(Double value) {
			addCriterion("current <", value, "current");
			return (Criteria) this;
		}

		public Criteria andCurrentLessThanOrEqualTo(Double value) {
			addCriterion("current <=", value, "current");
			return (Criteria) this;
		}

		public Criteria andCurrentIn(List<Double> values) {
			addCriterion("current in", values, "current");
			return (Criteria) this;
		}

		public Criteria andCurrentNotIn(List<Double> values) {
			addCriterion("current not in", values, "current");
			return (Criteria) this;
		}

		public Criteria andCurrentBetween(Double value1, Double value2) {
			addCriterion("current between", value1, value2, "current");
			return (Criteria) this;
		}

		public Criteria andCurrentNotBetween(Double value1, Double value2) {
			addCriterion("current not between", value1, value2, "current");
			return (Criteria) this;
		}

		public Criteria andAIsNull() {
			addCriterion("a is null");
			return (Criteria) this;
		}

		public Criteria andAIsNotNull() {
			addCriterion("a is not null");
			return (Criteria) this;
		}

		public Criteria andAEqualTo(Double value) {
			addCriterion("a =", value, "a");
			return (Criteria) this;
		}

		public Criteria andANotEqualTo(Double value) {
			addCriterion("a <>", value, "a");
			return (Criteria) this;
		}

		public Criteria andAGreaterThan(Double value) {
			addCriterion("a >", value, "a");
			return (Criteria) this;
		}

		public Criteria andAGreaterThanOrEqualTo(Double value) {
			addCriterion("a >=", value, "a");
			return (Criteria) this;
		}

		public Criteria andALessThan(Double value) {
			addCriterion("a <", value, "a");
			return (Criteria) this;
		}

		public Criteria andALessThanOrEqualTo(Double value) {
			addCriterion("a <=", value, "a");
			return (Criteria) this;
		}

		public Criteria andAIn(List<Double> values) {
			addCriterion("a in", values, "a");
			return (Criteria) this;
		}

		public Criteria andANotIn(List<Double> values) {
			addCriterion("a not in", values, "a");
			return (Criteria) this;
		}

		public Criteria andABetween(Double value1, Double value2) {
			addCriterion("a between", value1, value2, "a");
			return (Criteria) this;
		}

		public Criteria andANotBetween(Double value1, Double value2) {
			addCriterion("a not between", value1, value2, "a");
			return (Criteria) this;
		}

		public Criteria andBIsNull() {
			addCriterion("b is null");
			return (Criteria) this;
		}

		public Criteria andBIsNotNull() {
			addCriterion("b is not null");
			return (Criteria) this;
		}

		public Criteria andBEqualTo(Double value) {
			addCriterion("b =", value, "b");
			return (Criteria) this;
		}

		public Criteria andBNotEqualTo(Double value) {
			addCriterion("b <>", value, "b");
			return (Criteria) this;
		}

		public Criteria andBGreaterThan(Double value) {
			addCriterion("b >", value, "b");
			return (Criteria) this;
		}

		public Criteria andBGreaterThanOrEqualTo(Double value) {
			addCriterion("b >=", value, "b");
			return (Criteria) this;
		}

		public Criteria andBLessThan(Double value) {
			addCriterion("b <", value, "b");
			return (Criteria) this;
		}

		public Criteria andBLessThanOrEqualTo(Double value) {
			addCriterion("b <=", value, "b");
			return (Criteria) this;
		}

		public Criteria andBIn(List<Double> values) {
			addCriterion("b in", values, "b");
			return (Criteria) this;
		}

		public Criteria andBNotIn(List<Double> values) {
			addCriterion("b not in", values, "b");
			return (Criteria) this;
		}

		public Criteria andBBetween(Double value1, Double value2) {
			addCriterion("b between", value1, value2, "b");
			return (Criteria) this;
		}

		public Criteria andBNotBetween(Double value1, Double value2) {
			addCriterion("b not between", value1, value2, "b");
			return (Criteria) this;
		}

		public Criteria andRIsNull() {
			addCriterion("r is null");
			return (Criteria) this;
		}

		public Criteria andRIsNotNull() {
			addCriterion("r is not null");
			return (Criteria) this;
		}

		public Criteria andREqualTo(Double value) {
			addCriterion("r =", value, "r");
			return (Criteria) this;
		}

		public Criteria andRNotEqualTo(Double value) {
			addCriterion("r <>", value, "r");
			return (Criteria) this;
		}

		public Criteria andRGreaterThan(Double value) {
			addCriterion("r >", value, "r");
			return (Criteria) this;
		}

		public Criteria andRGreaterThanOrEqualTo(Double value) {
			addCriterion("r >=", value, "r");
			return (Criteria) this;
		}

		public Criteria andRLessThan(Double value) {
			addCriterion("r <", value, "r");
			return (Criteria) this;
		}

		public Criteria andRLessThanOrEqualTo(Double value) {
			addCriterion("r <=", value, "r");
			return (Criteria) this;
		}

		public Criteria andRIn(List<Double> values) {
			addCriterion("r in", values, "r");
			return (Criteria) this;
		}

		public Criteria andRNotIn(List<Double> values) {
			addCriterion("r not in", values, "r");
			return (Criteria) this;
		}

		public Criteria andRBetween(Double value1, Double value2) {
			addCriterion("r between", value1, value2, "r");
			return (Criteria) this;
		}

		public Criteria andRNotBetween(Double value1, Double value2) {
			addCriterion("r not between", value1, value2, "r");
			return (Criteria) this;
		}

		public Criteria andIncreaseIsNull() {
			addCriterion("increase is null");
			return (Criteria) this;
		}

		public Criteria andIncreaseIsNotNull() {
			addCriterion("increase is not null");
			return (Criteria) this;
		}

		public Criteria andIncreaseEqualTo(Double value) {
			addCriterion("increase =", value, "increase");
			return (Criteria) this;
		}

		public Criteria andIncreaseNotEqualTo(Double value) {
			addCriterion("increase <>", value, "increase");
			return (Criteria) this;
		}

		public Criteria andIncreaseGreaterThan(Double value) {
			addCriterion("increase >", value, "increase");
			return (Criteria) this;
		}

		public Criteria andIncreaseGreaterThanOrEqualTo(Double value) {
			addCriterion("increase >=", value, "increase");
			return (Criteria) this;
		}

		public Criteria andIncreaseLessThan(Double value) {
			addCriterion("increase <", value, "increase");
			return (Criteria) this;
		}

		public Criteria andIncreaseLessThanOrEqualTo(Double value) {
			addCriterion("increase <=", value, "increase");
			return (Criteria) this;
		}

		public Criteria andIncreaseIn(List<Double> values) {
			addCriterion("increase in", values, "increase");
			return (Criteria) this;
		}

		public Criteria andIncreaseNotIn(List<Double> values) {
			addCriterion("increase not in", values, "increase");
			return (Criteria) this;
		}

		public Criteria andIncreaseBetween(Double value1, Double value2) {
			addCriterion("increase between", value1, value2, "increase");
			return (Criteria) this;
		}

		public Criteria andIncreaseNotBetween(Double value1, Double value2) {
			addCriterion("increase not between", value1, value2, "increase");
			return (Criteria) this;
		}

		public Criteria andTimeIsNull() {
			addCriterion("time is null");
			return (Criteria) this;
		}

		public Criteria andTimeIsNotNull() {
			addCriterion("time is not null");
			return (Criteria) this;
		}

		public Criteria andTimeEqualTo(Date value) {
			addCriterionForJDBCDate("time =", value, "time");
			return (Criteria) this;
		}

		public Criteria andTimeNotEqualTo(Date value) {
			addCriterionForJDBCDate("time <>", value, "time");
			return (Criteria) this;
		}

		public Criteria andTimeGreaterThan(Date value) {
			addCriterionForJDBCDate("time >", value, "time");
			return (Criteria) this;
		}

		public Criteria andTimeGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("time >=", value, "time");
			return (Criteria) this;
		}

		public Criteria andTimeLessThan(Date value) {
			addCriterionForJDBCDate("time <", value, "time");
			return (Criteria) this;
		}

		public Criteria andTimeLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("time <=", value, "time");
			return (Criteria) this;
		}

		public Criteria andTimeIn(List<Date> values) {
			addCriterionForJDBCDate("time in", values, "time");
			return (Criteria) this;
		}

		public Criteria andTimeNotIn(List<Date> values) {
			addCriterionForJDBCDate("time not in", values, "time");
			return (Criteria) this;
		}

		public Criteria andTimeBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("time between", value1, value2, "time");
			return (Criteria) this;
		}

		public Criteria andTimeNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("time not between", value1, value2, "time");
			return (Criteria) this;
		}
	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the database table public.cand_rate
	 * @mbg.generated  Wed Nov 01 16:41:19 CST 2017
	 */
	public static class Criterion {
		private String condition;
		private Object value;
		private Object secondValue;
		private boolean noValue;
		private boolean singleValue;
		private boolean betweenValue;
		private boolean listValue;
		private String typeHandler;

		public String getCondition() {
			return condition;
		}

		public Object getValue() {
			return value;
		}

		public Object getSecondValue() {
			return secondValue;
		}

		public boolean isNoValue() {
			return noValue;
		}

		public boolean isSingleValue() {
			return singleValue;
		}

		public boolean isBetweenValue() {
			return betweenValue;
		}

		public boolean isListValue() {
			return listValue;
		}

		public String getTypeHandler() {
			return typeHandler;
		}

		protected Criterion(String condition) {
			super();
			this.condition = condition;
			this.typeHandler = null;
			this.noValue = true;
		}

		protected Criterion(String condition, Object value, String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.typeHandler = typeHandler;
			if (value instanceof List<?>) {
				this.listValue = true;
			} else {
				this.singleValue = true;
			}
		}

		protected Criterion(String condition, Object value) {
			this(condition, value, null);
		}

		protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.secondValue = secondValue;
			this.typeHandler = typeHandler;
			this.betweenValue = true;
		}

		protected Criterion(String condition, Object value, Object secondValue) {
			this(condition, value, secondValue, null);
		}
	}

	/**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table public.cand_rate
     *
     * @mbg.generated do_not_delete_during_merge Tue Oct 31 17:43:08 CST 2017
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }
}